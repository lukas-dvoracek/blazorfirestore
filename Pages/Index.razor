@page "/"
@using Services
@using TinyMCE.Blazor
@using global::Shared
@inject KeyService KeyService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@if (!IsEditing)
{
	<button @onclick="() => EditContent(true)">Editovat</button>
}
else
{
	<EditorTiny Content=@content OnContentChanged=HandleContentChange OnCancel=HandleCancel></EditorTiny>
}

@* <textarea Id="tinymceEditor"></textarea> *@
<!-- Zobrazení aktuálního obsahu -->
<p>@text</p>
<div>@(new MarkupString(text))</div>
<pre>@text</pre>
<p>@(new MarkupString(plainText))</p>


@* <h3>WYSIWYG Editor Quill</h3> *@
@* <div id="toolbar"> *@
@*     <button class="ql-bold"></button> *@
@*     <button class="ql-italic"></button> *@
@*     <button class="ql-underline"></button> *@
@*     <button class="ql-strike"></button> *@
@* </div> *@
@* <QuillEditor Content="@text" ContentChanged="OnTextChanged" /> *@

@* <p>Aktuální obsah:</p> *@
@* <div>@(new MarkupString(text))</div> *@
@* <pre>@text</pre> *@



@code {
	private ApiKeys? keys;
	private bool keysLoaded = false;
	private string text = "<p>Ahoj světe!</p>";
	private string content = "<p>Hello world</p>";
	private string plainText = "";
	private bool IsEditing = false;

	private void OnTextChanged(string newText)
	{
		text = newText;
	}

	protected override async Task OnInitializedAsync()
	{
		keys = await KeyService.GetKeysAsync();
		Environment.SetEnvironmentVariable("FBAPIKey", keys.FB_API_KEY);
		keysLoaded = true;
		StateHasChanged(); // Přinutí komponentu k novému renderu
	}

	// Tato metoda bude volána z JavaScriptu
	[JSInvokable]
	public static void OnEditorContentChanged(string content)
	{
		// Můžete provádět jakékoliv operace s obsahem, např. uložení nebo zobrazení
		Console.WriteLine("Editor content changed: " + content);
	}

	private async Task ConvertToPlainText(string text)
	{
		plainText = await JS.InvokeAsync<string>("stripHtml", text);
	}

	private async Task SaveContent()
	{
		// TODO
		// Předpokládáme, že text je již upravený ve "text" proměnné
		// await SomeService.SaveContentAsync(text);  // Uložení do databáze nebo jiného úložiště        
		// var content = await JS.InvokeAsync<string>("getTinyMCEContent", "tinymceEditor");
		text = content;
		await ConvertToPlainText(text);

	}

	private async Task HandleContentChange(string newContent)
	{
		text = newContent;
		content = text;
		await ConvertToPlainText(text);
		EditContent(false);
	}

	[Inject] IJSRuntime JS { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// if (keysLoaded && keys != null)
		// //if (firstRender)
		// {
		//     await JS.InvokeVoidAsync("initTinyMCE", "tinymceEditor", @keys.TINYMCE_API_KEY);
		// }
	}
	private async Task HandleCancel()
	{
		EditContent(false);
	}
	
	private void EditContent(Boolean editing = true) => IsEditing = editing;
}