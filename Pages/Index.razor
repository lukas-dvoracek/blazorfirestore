@page "/"
@using Services
@using TinyMCE.Blazor
@using global::Shared
@inject KeyService KeyService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<h3>API Klíče</h3>

@if (keys == null)
{
    <p>Načítám klíče...</p>
}
else
{
    @* <p>Firebase API Key: @keys.FB_API_KEY</p> *@
    @* <p>TinyMCE Key: @keys.TINYMCE_API_KEY</p> *@
    <p>Firebase API Key: načteno</p>
    <p>TinyMCE Key: načteno</p>
}


@* <h3>WYSIWYG Editor Quill</h3> *@
@* <div id="toolbar"> *@
@*     <button class="ql-bold"></button> *@
@*     <button class="ql-italic"></button> *@
@*     <button class="ql-underline"></button> *@
@*     <button class="ql-strike"></button> *@
@* </div> *@
@* <QuillEditor Content="@text" ContentChanged="OnTextChanged" /> *@

@* <p>Aktuální obsah:</p> *@
@* <div>@(new MarkupString(text))</div> *@
@* <pre>@text</pre> *@



<h3>TinyMCE v Blazor WASM</h3>
@if (keys != null)
{
    <Editor Id="tinymceEditor" ApiKey="@keys.TINYMCE_API_KEY" />
}
else
{
    <p>Načítání editoru...</p>
}

@* <TinyMCE.Blazor.Editor ApiKey=doplnitApiKey /> *@

@code {
    private ApiKeys? keys;
    private string text = "<p>Ahoj světe!</p>";
    private bool keysLoaded = false;

    private void OnTextChanged(string newText)
    {
        text = newText;
    }

    protected override async Task OnInitializedAsync()
    {
        keys = await KeyService.GetKeysAsync();
        keysLoaded = true;
        StateHasChanged(); // Přinutí komponentu k novému renderu
    }

    [Inject] IJSRuntime JS { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (keysLoaded && keys != null)
    //     //if (firstRender)
    //     {
    //         await JS.InvokeVoidAsync("initTinyMCE", "tinymceEditor", @keys.TINYMCE_API_KEY);
    //     }
    // }
}