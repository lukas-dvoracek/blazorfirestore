@page "/"
@using Services
@using TinyMCE.Blazor
@using global::Shared
@inject KeyService KeyService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<h3>API Klíče</h3>

@if (keys == null)
{
    <p>Načítám klíče...</p>
}
else
{
    @* <p>Firebase API Key: @keys.FB_API_KEY</p> *@
    @* <p>TinyMCE Key: @keys.TINYMCE_API_KEY</p> *@
    <p>Firebase API Key: načteno</p>
    <p>TinyMCE Key: načteno</p>
}


@* <h3>WYSIWYG Editor Quill</h3> *@
@* <div id="toolbar"> *@
@*     <button class="ql-bold"></button> *@
@*     <button class="ql-italic"></button> *@
@*     <button class="ql-underline"></button> *@
@*     <button class="ql-strike"></button> *@
@* </div> *@
@* <QuillEditor Content="@text" ContentChanged="OnTextChanged" /> *@

@* <p>Aktuální obsah:</p> *@
@* <div>@(new MarkupString(text))</div> *@
@* <pre>@text</pre> *@


<h3>TinyMCE v Blazor WASM</h3>
<a href="https://www.tiny.cloud/docs/tinymce/latest/blazor-ref/#component-binding">Nastavení TinyMCE v Blazoru</a>
<a href="https://www.tiny.cloud/docs/tinymce/latest/customize-ui/">Změna vzhledu</a>

 @if (keys != null)
{
    <Editor 
        @bind-Value="content" 
        Id="tinymceEditor" 
        ApiKey="@keys.TINYMCE_API_KEY"   
        Inline=false
        CloudChannel="7"
        Disable=false
        ClassName="tinymce-wrapper"
        JsConfSrc="config"
        @* Conf="@yourConf" *@
        @* LicenseKey="your-license-key" *@
        @* ScriptSrc="config" *@
    />

    <button @onclick="SaveContent">Náhled</button>
    @* <textarea Id="tinymceEditor"></textarea> *@
    <!-- Zobrazení aktuálního obsahu -->
    <p>@text</p> 
    <div>@(new MarkupString(text))</div>
    <pre>@text</pre>
    <p>@(new MarkupString(plainText))</p>
}
else
{
    <p>Načítání editoru...</p>
}

@code {
    private ApiKeys? keys;
    private string text = "<p>Ahoj světe!</p>";
    private bool keysLoaded = false;
    private string content = "<p>Hello world</p>";
    private string plainText = "";

    private void OnTextChanged(string newText)
    {
        text = newText;
    }

    protected override async Task OnInitializedAsync()
    {
        keys = await KeyService.GetKeysAsync();
        keysLoaded = true;
        StateHasChanged(); // Přinutí komponentu k novému renderu
    }

    // Tato metoda bude volána z JavaScriptu
    [JSInvokable]
    public static void OnEditorContentChanged(string content)
    {
        // Můžete provádět jakékoliv operace s obsahem, např. uložení nebo zobrazení
        Console.WriteLine("Editor content changed: " + content);
    }

    private async Task ConvertToPlainText(string text)
    {
        plainText = await JS.InvokeAsync<string>("stripHtml", text);
    }

    private async Task SaveContent()
    {
        // TODO
        // Předpokládáme, že text je již upravený ve "text" proměnné
        // await SomeService.SaveContentAsync(text);  // Uložení do databáze nebo jiného úložiště        
        // var content = await JS.InvokeAsync<string>("getTinyMCEContent", "tinymceEditor");
        text = content;
        await ConvertToPlainText(text);

    }

    [Inject] IJSRuntime JS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (keysLoaded && keys != null)
        // //if (firstRender)
        // {
        //     await JS.InvokeVoidAsync("initTinyMCE", "tinymceEditor", @keys.TINYMCE_API_KEY);
        // }
    }
}