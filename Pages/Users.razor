@page "/users"
@using global::Services
@using static global::Shared.Objects
@inject FirestoreService FirestoreService

<!-- Injects the IJSRuntime service, which allows the component to call JavaScript functions -->
@inject IJSRuntime JS

<!-- Displays the title "Firebase" -->

<h1 class="mb-4"><i class="fa-solid fa-users"> </i>Seznam uživatelů</h1>

<!-- Input box to add a new user -->
@* <div> *@
@*     <!-- Binds the currentUser variable to the input box --> *@
@*     <input @bind=@currentUser placeholder="User Name" /> *@
@*     <input @bind=@currentUserRole placeholder="Role" /> *@
@*     <!-- Binds the AddUser method to the button --> *@
@*     <button @onclick="AddUser">Add</button> *@
@* </div> *@
@* <br /> *@

<div class="mb-4">
    <label for="roleFilter" class="form-label">Filtrovat podle role:</label>
    <select id="roleFilter" class="form-select" onchange="filterUsers()">
        <option value="all">Všechny role</option>
        <option value="admin">Administrátor</option>
        <option value="editor">Redaktor</option>
        <option value="user">Čtenář</option>
        <option value="mod">Moderátor</option>
    </select>
</div>

<!-- Displays the list of users if isLoading is false -->
@if (!isLoading)
{    
    <div id="userList" class="row g-3">
    <!-- Loops through the userList -->
    @foreach(var user in userList)
    {
            <div class="col-md-6 user-item" data-role=@user.UserRole>
                <div class="card user-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-start flex-wrap">
                        <div class="me-3 flex-grow-1 break-word">
                            <h5 class="card-title text-truncate" style="max-width: 100%;">@user.UserName</h5>
                            <p class="card-text text-muted mb-0">@user.UserRole</p>
                        </div>
                        <a href="@($"user/{user.Id}")" class="btn btn-outline-primary mt-1 flex-shrink-0">Detail</a>

                            @* <button @onclick="() => DeleteUser(user.Id!)"> Del</button> *@
                    </div>
                </div>
            </div>

            @* Displays the user's name  *@
            @* <a href="@($"user/{user.Id}")">@user.UserName</a> - @user.UserRole *@
            @* Binds the DeleteUser method to the delete button  *@
            @* <button @onclick="()=>DeleteUser(user.Id!)"> Del</button> *@   
    } 
    </div>
}
else
{
    <p>Loading...</p>
}

<script>
    function filterUsers() {
        const selectedRole = document.getElementById('roleFilter').value;
        const users = document.querySelectorAll('.user-item');
        users.forEach(user => {
            const role = user.getAttribute('data-role');
            user.style.display = (selectedRole === 'all' || role === selectedRole) ? 'block' : 'none';
        });
    }
</script>

@code {
    // A list of User objects to store the users
    private List<User> userList = new();
    // A flag to indicate if the component is still loading
    private bool isLoading = true;
    // The name of the new user to add
    private string? currentUser;
    private string? currentUserRole;

    // Adds a new user to Firebase
    private async Task AddUser()
    {
        await FirestoreService.AddUserAsync(currentUser, currentUserRole);
        // Invokes a JavaScript function to add the user to Firebase
        // Retrieves the updated list of users from Firebase
        userList = await FirestoreService.GetUsersAsync();
        // userList = await JS.InvokeAsync<List<User>>("getUsers");
    }

    // Deletes a user from Firebase
    private async Task DeleteUser(string userId)
    {
        await FirestoreService.DeleteUserAsync(userId);
        userList = await FirestoreService.GetUsersAsync();
        // Removes the user from the userList
        // userList = userList.Where(i => i.Id != userId).ToList();
        // Invokes a JavaScript function to delete the user from Firebase
        // await JS.InvokeVoidAsync("deleteUser", userId);
    }

    // Retrieves the list of users from Firebase after the component has rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userList = await FirestoreService.GetUsersAsync();
            // Retrieves the list of users from Firebase
            // userList = await JS.InvokeAsync<List<User>>("getUsers");
            // Sets isLoading to false to indicate that the component has finished loading
            isLoading = false;
            // Forces the component to re-render
            StateHasChanged();
        }
    }

}
